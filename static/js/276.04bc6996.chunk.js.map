{"version":3,"file":"static/js/276.04bc6996.chunk.js","mappings":"wQAMe,SAASA,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAUC,EAAAA,EAAAA,MAAYD,QAe5B,OAbAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAgBH,GAF3C,OAEUI,EAFV,OAGIL,EAAWK,EAASC,SAHxB,sDAKIC,EAAAA,GAAAA,MAAY,iDALhB,+DADc,uBAAC,WAAD,wBAUdC,EACD,GAAE,CAACP,KAGF,gCACGF,IACC,wBACGA,EAAQU,KAAI,SAAAC,GAAM,OACjB,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOG,GADC,MAQF,KAAb,OAAPd,QAAO,IAAPA,OAAA,EAAAA,EAASe,UACR,wBACE,yCAKT,C","sources":["pages/ReviewsMovie.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/api-movies';\nimport { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\nexport default function ReviewsMoviePage() {\n  const [reviews, setReviews] = useState([]);\n  const movieId = useParams().movieId;\n\n  useEffect(() => {\n    async function fetchReviewsMovie() {\n      try {\n        const response = await getMovieReviews(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        toast.error('Oops! Something went wrong! Please try again!');\n        throw error;\n      }\n    }\n    fetchReviewsMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews && (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>{review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {reviews?.length === 0 && (\n        <p>\n          <b>Not found</b>\n        </p>\n      )}\n    </>\n  );\n}\n\n// import { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { getMovieCast } from 'services/api-movies';\n\n// export default function CastMovie() {\n//   const [casts, setCast] = useState([]);\n//   const movieId = useParams().movieId;\n\n//   useEffect(() => {\n//     async function fetchCastMovie() {\n//       const response = await getMovieCast(movieId);\n//       setCast(response.cast);\n//     }\n//     fetchCastMovie();\n//   }, []);\n\n//   return (\n//     <>\n//       {casts && (\n//         <ul>\n//           {casts.map(cast => (\n//             <li key={cast.id}>{cast.name}</li>\n//           ))}\n//         </ul>\n//       )}\n//     </>\n//   );\n// }\n"],"names":["ReviewsMoviePage","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReviews","response","results","toast","fetchReviewsMovie","map","review","author","content","id","length"],"sourceRoot":""}