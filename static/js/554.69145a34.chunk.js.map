{"version":3,"file":"static/js/554.69145a34.chunk.js","mappings":"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","sources":["components/MovieItem/MovieItem.styled.jsx","components/MovieItem/MovieItem.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieItemNavLink = styled(NavLink)`\n  border-radius: 10px;\n`;\n\nexport const MovieItemImg = styled.img`\n  border-radius: 10px;\n  width: 300px;\n  height: 450px;\n`;\nexport const MovieItemTitle = styled.h3`\n  font-family: Kanit;\n  max-width: 290px;\n  font-size: 24px;\n  color: rgb(245, 246, 248);\n  font-weight: 500;\n  line-height: 110%;\n  letter-spacing: -0.24px;\n  text-align: center;\n  margin-bottom: 5px;\n  margin-top: 5px;\n`;\n\nexport const MovieItemVoteAverge = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  margin-top: 20px;\n  margin-right: 20px;\n  font-size: 16px;\n  font-weight: 500;\n  background: var(--linear, linear-gradient(90deg, #cc8a04 0%, #b27600 100%));\n  padding: 7px;\n  border-radius: 50px;\n`;\nexport const MovieItemWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 7px;\n  padding-bottom: 15px;\n`;\nexport const MovieItemRelease = styled.p`\n  font-weight: 500;\n`;\nexport const MovieItemGenresList = styled.ul`\n  display: flex;\n  gap: 5px;\n`;\nexport const MovieItemGenresItem = styled.li`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const MovieItemOverview = styled.p`\n  text-align: center;\n  display: -webkit-box;\n  max-width: 400px;\n  -webkit-line-clamp: 7;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nexport const MovieItemOverviewWrap = styled.div`\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding: 10px 10px;\n  font-size: 14px;\n  line-height: 1.5;\n  letter-spacing: 0.02em;\n  height: 55%;\n  padding: 10px 10px;\n  border-radius: 10px;\n  overflow: hidden;\n  transform: translateY(101%);\n  transition: 300ms linear;\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nexport const MovieItemStyled = styled.li`\n  height: 100%;\n  height: auto;\n  position: relative;\n  margin-bottom: 15px;\n  overflow: hidden;\n  &:hover {\n    border-radius: 10px;\n    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.5);\n    &:hover ${MovieItemOverviewWrap} {\n      transform: translateY(0);\n      background-color: rgba(0, 0, 0, 0.9);\n    }\n  }\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport defaultImg from '../../img/img-default-min.jpg';\nimport PropTypes from 'prop-types';\nimport {\n  MovieItemStyled,\n  MovieItemImg,\n  MovieItemTitle,\n  MovieItemNavLink,\n  MovieItemVoteAverge,\n  MovieItemRelease,\n  MovieItemGenresList,\n  MovieItemGenresItem,\n  MovieItemWrap,\n  MovieItemOverview,\n  MovieItemOverviewWrap,\n} from './MovieItem.styled';\n\nexport default function MovieItem({ movieData, moviesGenres }) {\n  const location = useLocation();\n\n  return (\n    <>\n      <MovieItemStyled key={movieData.id}>\n        <MovieItemNavLink\n          to={`/movies/${movieData.id}`}\n          state={{ from: location }}\n        >\n          <MovieItemImg\n            src={\n              movieData.poster_path\n                ? `https://image.tmdb.org/t/p/w300${movieData.poster_path}`\n                : defaultImg\n            }\n            alt={movieData.original_title}\n            loading=\"lazy\"\n          />\n          <MovieItemTitle>{movieData.title}</MovieItemTitle>\n          <MovieItemVoteAverge>\n            {movieData.vote_average?.toFixed(2)}\n          </MovieItemVoteAverge>\n          <MovieItemOverviewWrap>\n            <MovieItemWrap>\n              <MovieItemGenresList>\n                {movieData.genre_ids?.map((id, index, array) => {\n                  if (index <= 1) {\n                    const genre = moviesGenres.find(\n                      moviesGenre => moviesGenre.id === id\n                    );\n                    return (\n                      <React.Fragment key={id}>\n                        <MovieItemGenresItem>\n                          {genre.name ?? ''}\n                          {index !== array.length - 1 && ','}\n                        </MovieItemGenresItem>\n                        {index === array.length - 1 && <span>|</span>}\n                      </React.Fragment>\n                    );\n                  } else if (index === 2) {\n                    return (\n                      <React.Fragment key=\"other\">\n                        <MovieItemGenresItem>Other</MovieItemGenresItem>\n                        <span>|</span>\n                      </React.Fragment>\n                    );\n                  }\n                  return null;\n                })}\n              </MovieItemGenresList>\n              <MovieItemRelease>\n                {movieData.release_date?.substring(0, 4)}\n              </MovieItemRelease>\n            </MovieItemWrap>\n            <MovieItemOverview>{movieData.overview}</MovieItemOverview>\n          </MovieItemOverviewWrap>\n        </MovieItemNavLink>\n      </MovieItemStyled>\n    </>\n  );\n}\n\nMovieItem.propTypes = {\n  movieData: PropTypes.object.isRequired,\n  moviesGenres: PropTypes.array.isRequired,\n};\n"],"names":["MovieItemNavLink","styled","NavLink","_templateObject","_taggedTemplateLiteral","MovieItemImg","_templateObject2","MovieItemTitle","_templateObject3","MovieItemVoteAverge","_templateObject4","MovieItemWrap","_templateObject5","MovieItemRelease","_templateObject6","MovieItemGenresList","_templateObject7","MovieItemGenresItem","_templateObject8","MovieItemOverview","_templateObject9","MovieItemOverviewWrap","_templateObject10","MovieItemStyled","_templateObject11","MovieItem","_ref","_movieData$vote_avera","_movieData$genre_ids","_movieData$release_da","movieData","moviesGenres","location","useLocation","_jsx","_Fragment","children","_jsxs","to","concat","id","state","from","src","poster_path","defaultImg","alt","original_title","loading","title","vote_average","toFixed","genre_ids","map","index","array","_genre$name","genre","find","moviesGenre","React","name","length","release_date","substring","overview"],"sourceRoot":""}